# -*- mode: python -*-

router1_config = """
router {
    mode: interior
    id: router1
}

tcpListener {
    address: flimflam/tcp
    host: localhost
    port: 45673
}

connector {
   host: localhost
   port: 45672
   role: inter-router
}
"""

router2_config = """
router {
    mode: interior
    id: router2
}

tcpConnector {
    address: flimflam/tcp
    host: localhost
    port: 45674
}

listener {
    host: localhost
    port: 45672
    role: inter-router
}
"""

router1_config_file = write(make_temp_file(), router1_config)
router2_config_file = write(make_temp_file(), router2_config)

standard_args = (
    CommandArgument("duration", default=10, positional=False,
                    help="The time to run (excluding warmup) in seconds"),
    CommandArgument("warmup", default=10, positional=False,
                    help="Warmup time in seconds"),
    CommandArgument("jobs", default=2, positional=False,
                    help="The number of concurrent client workloads"),
)

@command
def check():
    """
    Check for required programs and system configuration
    """
    check_program("gcc", "I can't find gcc.  Run 'dnf install gcc'.")
    check_program("perf", "I can't find the perf tools.  Run 'dnf install perf'.")
    check_program("pidstat", "I can't find pidstat.  Run 'dnf install sysstat'.")
    check_program("skrouterd", "I can't find skrouterd.  Make sure it is on the path.")

    perf_event_paranoid = read("/proc/sys/kernel/perf_event_paranoid")

    if perf_event_paranoid != "-1\n":
        exit("Perf events are not enabled.  Run 'echo -1 > /proc/sys/kernel/perf_event_paranoid' as root.")

@command
def clean():
    """
    Remove build artifacts and output files
    """
    remove("perf.data")
    remove("perf.data.old")
    remove("flamegraph.html")
    remove("flamegraph.html.old")
    remove(list_dir(".", "transfers.*.csv"))

@command
def build():
    """
    Compile the load generator
    """
    check()
    # run("gcc pellmell.c -o pellmell -g -O2 -std=c99 -fno-omit-frame-pointer -lqpid-proton -lqpid-proton-proactor")

def run_outer(inner, jobs, warmup):
    procs = list()

    with start(f"skrouterd --config {router1_config_file}") as router1, \
         start(f"skrouterd --config {router2_config_file}") as router2:
        await_port(45673)

        procs.append(start("./tcpserver"))
        procs.append(start(f"./tcpclient {jobs}"))

        try:
            with start(f"pidstat 2 --human -t -p {router1.pid},{router2.pid}"):
                sleep(warmup)
                inner(router1, router2)
        finally:
            for proc in procs:
                kill(proc)

    total = 0

    for i in range(jobs):
        line = tail(f"transfers.{i}.csv", 1)
        values = line.split(",", 1)

        try:
            total += int(values[1])
        except IndexError:
            print("ERROR: Unexpected transfer value:", values)

    print()
    print(f">>> {total:,} bytes <<<")

def print_transfers(duration):
    pass

@command(args=standard_args)
def stat(jobs, duration, warmup):
    """
    Run the workload and capture 'perf stat' output
    """
    build()

    with temp_file() as output:
        def inner(router1, router2):
            run(f"perf stat --detailed --pid {router1.pid},{router2.pid} sleep {duration}", output=output)

        run_outer(inner, jobs, warmup)

        print_transfers(duration + warmup)

        print(read(output))

@command(args=standard_args)
def flamegraph(jobs, duration, warmup):
    """
    Run the workload and generate a flamegraph
    """
    try:
        check_exists("/usr/share/d3-flame-graph")
    except:
        fail("I can't find d3-flame-graph.  Run 'dnf install js-d3-flame-graph'.")

    build()

    with temp_file() as output:
        def inner(router1, router2):
            if exists("flamegraph.html"):
                move("flamegraph.html", "flamegraph.html.old")

            run(f"perf script flamegraph --freq 99 --call-graph dwarf --pid {router1.pid},{router2.pid} sleep {duration}", stdout=output)

        run_outer(inner, jobs, warmup)

        print_transfers(duration + warmup)

        print(read(output))

@command(args=standard_args)
def record(jobs, duration, warmup):
    """
    Run the workload and capture perf events using 'perf record'
    """
    build()

    with temp_file() as output:
        def inner(router1, router2):
            run(f"perf record --freq 99 --call-graph dwarf --pid {router1.pid},{router2.pid} sleep {duration}", output=output)

        run_outer(inner, jobs, warmup)

        print_transfers(duration + warmup)

        print(read(output))

@command
def self_test():
    """
    Test Flimflam
    """
    flamegraph(duration=1, warmup=0.1, jobs=1)
    stat(duration=1, warmup=0.1, jobs=1)
    record(duration=1, warmup=0.1, jobs=1)
    clean()
